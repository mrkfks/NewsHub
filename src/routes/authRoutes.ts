import express from 'express';
import { register, login, getProfile, refreshAccessToken } from '../controllers/authController';
import { authMiddleware } from '../middlewares/authMiddleware';
import { registerValidation, loginValidation, refreshTokenValidation } from '../validations/authValidator';
import { validate } from '../validations';

const router = express.Router();

/**
 * @swagger
 * /api/auth/register:
 *   post:
 *     summary: Yeni kullanÄ±cÄ± kaydÄ±
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - name
 *               - email
 *               - password
 *             properties:
 *               name:
 *                 type: string
 *                 example: Ahmet YÄ±lmaz
 *               email:
 *                 type: string
 *                 format: email
 *                 example: ahmet@example.com
 *               password:
 *                 type: string
 *                 format: password
 *                 minLength: 6
 *                 example: ahmet123
 *               role:
 *                 type: string
 *                 enum: [User, Moderator, Admin]
 *                 default: User
 *     responses:
 *       201:
 *         description: KayÄ±t baÅŸarÄ±lÄ±
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Success'
 *       400:
 *         description: Validation hatasÄ± veya email zaten kullanÄ±lÄ±yor
 *         content:
 *           application/json:
 *             schema:
 *               $ref: '#/components/schemas/Error'
 */
router.post('/register', registerValidation, validate, register);

/**
 * @swagger
 * /api/auth/login:
 *   post:
 *     summary: KullanÄ±cÄ± giriÅŸi
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - email
 *               - password
 *             properties:
 *               email:
 *                 type: string
 *                 format: email
 *                 example: ahmet@example.com
 *               password:
 *                 type: string
 *                 format: password
 *                 example: ahmet123
 *     responses:
 *       200:
 *         description: GiriÅŸ baÅŸarÄ±lÄ±, JWT token dÃ¶ner
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *                   properties:
 *                     accessToken:
 *                       type: string
 *                     refreshToken:
 *                       type: string
 *                     user:
 *                       $ref: '#/components/schemas/User'
 *       401:
 *         description: GeÃ§ersiz email veya ÅŸifre
 */
router.post('/login', loginValidation, validate, login);

/**
 * @swagger
 * /api/auth/refresh:
 *   post:
 *     summary: Access token yenileme
 *     tags: [Auth]
 *     requestBody:
 *       required: true
 *       content:
 *         application/json:
 *           schema:
 *             type: object
 *             required:
 *               - refreshToken
 *             properties:
 *               refreshToken:
 *                 type: string
 *     responses:
 *       200:
 *         description: Token baÅŸarÄ±yla yenilendi
 *       401:
 *         description: GeÃ§ersiz refresh token
 */
router.post('/refresh', refreshTokenValidation, validate, refreshAccessToken);

/**
 * @swagger
 * /api/auth/profile:
 *   get:
 *     summary: KullanÄ±cÄ± profil bilgilerini getir
 *     tags: [Auth]
 *     security:
 *       - bearerAuth: []
 *     responses:
 *       200:
 *         description: Profil bilgileri baÅŸarÄ±yla getirildi
 *         content:
 *           application/json:
 *             schema:
 *               type: object
 *               properties:
 *                 success:
 *                   type: boolean
 *                 message:
 *                   type: string
 *                 data:
 *                   type: object
 *                   properties:
 *                     user:
 *                       $ref: '#/components/schemas/User'
 *       401:
 *         description: Yetkisiz eriÅŸim - Token geÃ§ersiz veya eksik
 *       404:
 *         description: KullanÄ±cÄ± bulunamadÄ±
 */
router.get('/profile', authMiddleware, (req, res) => {
    console.log('ğŸ”´ API ROUTE: /api/auth/profile route Ã§aÄŸrÄ±ldÄ±!');
    return getProfile(req, res);
});

export default router;

